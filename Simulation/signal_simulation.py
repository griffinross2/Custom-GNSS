# Script for simulating signals with noise to test tracking algorithms and filters

import numpy as np
import matplotlib.pyplot as plt

fs = 69.984e6       # Sampling frequency
fc = 9.334875e6     # Intermediate frequency
fgnss = 1.57542e9   # Galileo E1 frequency

# Code for Galileo E1 pilot of PRN 1
gal_e1_pilot_code = [ 0xB3, 0x93, 0x40, 0xCA, 0x1C, 0x81, 0x7D, 0x81, 0xEF, 0x4F, 0xAE, 0x4E, 0x95, 0xBF, 0x35, 0x04, 0xA7, 0x70, 0x90, 0x89, 0xFB, 0x48, 0x56, 0x0E, 0x9E, 0x3E, 0xF8, 0x02, 0x18, 0x0E, 0x85, 0xEB, 0x21, 0x94, 0xE0, 0x59, 0x02, 0xC6, 0xC4, 0xC5, 0x20, 0x21, 0xFE, 0xB7, 0xEC, 0x64, 0xFD, 0x41, 0x6B, 0xCE, 0xBC, 0x8E, 0x39, 0xD6, 0x4A, 0x4B, 0x5E, 0xE3, 0x45, 0x29, 0x19, 0x11, 0xAB, 0x82, 0x04, 0xA8, 0x88, 0xC2, 0x5B, 0x1C, 0xD3, 0xD9, 0x34, 0x2A, 0x56, 0xC5, 0x38, 0x63, 0x6D, 0x3E, 0xAB, 0x95, 0x70, 0x37, 0xD0, 0x9E, 0x87, 0x9A, 0xE5, 0xF3, 0xA3, 0x98, 0x34, 0xFB, 0xB8, 0x4A, 0x3D, 0x8D, 0x50, 0x90, 0xD7, 0x81, 0x42, 0x46, 0xB6, 0x2E, 0x9C, 0xA6, 0x85, 0x33, 0xD2, 0xEC, 0x40, 0x3B, 0x4F, 0xB9, 0x48, 0x84, 0x67, 0xFF, 0x97, 0x58, 0xB0, 0xD1, 0x5A, 0x8C, 0xEF, 0x89, 0x18, 0x7A, 0x1D, 0x58, 0x97, 0x88, 0x00, 0x40, 0xB6, 0xC3, 0xC5, 0x24, 0x4E, 0x85, 0xA2, 0xAD, 0x14, 0xBC, 0xF2, 0xF5, 0xAB, 0xC4, 0x4A, 0x7B, 0x1D, 0x4A, 0x87, 0xE8, 0xBD, 0xA0, 0x57, 0x66, 0x21, 0x87, 0x73, 0xED, 0x4F, 0x70, 0xF8, 0xD1, 0xD0, 0x7C, 0xBB, 0x1E, 0x8C, 0xA6, 0x29, 0x8E, 0x64, 0xEE, 0x6D, 0xC5, 0x88, 0x6D, 0x37, 0x49, 0x5B, 0xA2, 0xED, 0xB3, 0xE0, 0xB0, 0xB6, 0x8A, 0xD9, 0xF3, 0x00, 0x31, 0x0B, 0x88, 0x89, 0x8D, 0xDE, 0xEF, 0xD4, 0x84, 0x53, 0x8C, 0x31, 0xA9, 0xBC, 0xAA, 0x76, 0xEC, 0xAD, 0x0C, 0x16, 0x60, 0x7D, 0x32, 0x18, 0x90, 0x58, 0xB0, 0x86, 0x2E, 0xE9, 0xD7, 0x0C, 0xEA, 0x9D, 0x30, 0x47, 0x55, 0xCE, 0x80, 0x37, 0xBA, 0x4C, 0x46, 0xC2, 0x57, 0x31, 0x81, 0x74, 0x8A, 0x21, 0x2E, 0x4B, 0x2B, 0xDD, 0x04, 0xF9, 0xBC, 0x24, 0x05, 0x18, 0x27, 0x3D, 0xC1, 0x7C, 0xBA, 0xFF, 0x21, 0xA0, 0x3E, 0x91, 0x20, 0xFA, 0x7D, 0xCA, 0x18, 0xD5, 0x6D, 0xD1, 0xD9, 0xA7, 0xE5, 0x10, 0xC9, 0x0C, 0xF2, 0x19, 0x10, 0x43, 0x85, 0xF5, 0x31, 0xF2, 0xEF, 0xAF, 0xD1, 0x85, 0xEC, 0xB6, 0xB9, 0x11, 0xF9, 0xB7, 0x80, 0x9D, 0x98, 0xD8, 0x6F, 0x15, 0x51, 0x6F, 0xFD, 0xDB, 0xE9, 0xBD, 0x1C, 0xF8, 0x66, 0x2E, 0xB7, 0x77, 0xC3, 0xF9, 0x4E, 0xA3, 0xF9, 0x62, 0xD7, 0xB7, 0x94, 0x49, 0xFA, 0xAD, 0x39, 0x93, 0x54, 0x29, 0xE9, 0x2C, 0xAE, 0x56, 0x37, 0xE9, 0xBC, 0xF4, 0xE9, 0x4D, 0x41, 0x3D, 0x27, 0x93, 0x49, 0x52, 0x40, 0x9A, 0xB5, 0x36, 0xBE, 0x40, 0x55, 0xAF, 0xBC, 0x43, 0x30, 0xCD, 0x1E, 0x4B, 0x55, 0x09, 0xEF, 0xE5, 0xF8, 0xEF, 0xC9, 0xEC, 0xBE, 0x9E, 0xF3, 0x77, 0xDE, 0x7E, 0x37, 0xC4, 0x79, 0xBB, 0x9D, 0x3E, 0xE7, 0x74, 0x5E, 0x46, 0x09, 0xB0, 0xA6, 0xD2, 0xC5, 0xD9, 0x2E, 0xB3, 0xC9, 0xE2, 0x27, 0x8C, 0x1F, 0x22, 0x21, 0xFF, 0x90, 0x75, 0x96, 0xAA, 0x5E, 0x09, 0x6A, 0xCF, 0x89, 0x90, 0xEB, 0xA9, 0x07, 0xE4, 0x3A, 0xD3, 0x20, 0xF8, 0x01, 0x9C, 0xB6, 0x35, 0x5A, 0x2B, 0xA8, 0x67, 0x0E, 0xE5, 0xA4, 0xF4, 0x63, 0xE8, 0xE5, 0x6F, 0x8F, 0x1D, 0x3E, 0x7F, 0x49, 0x22, 0x51, 0x0F, 0xB6, 0x68, 0xE3, 0x2C, 0x4C, 0xF2, 0x3A, 0xD8, 0x49, 0x63, 0x99, 0x63, 0x8B, 0x09, 0x5B, 0x47, 0x83, 0x3E, 0x0C, 0xBB, 0x34, 0x97, 0x7E, 0xB3, 0xE4, 0x24, 0x2E, 0xAF, 0x87, 0x0D, 0x86, 0x66, 0x0D, 0x6A, 0x73, 0xF8, 0x3E, 0x45, 0xD6, 0xE8, 0xA4, 0x1E, 0xDC, 0xA3, 0x81, 0x50, 0x79, 0x64, 0x95, 0x44, 0x59, 0x7C, 0x5C, 0x43, 0xB6, 0xC9, 0x3F, 0xEB, 0xAD, 0x57, 0x00, 0xD2, 0x2E, 0xDA, 0xF4, 0x31, 0xFD, 0x34, 0x00 ]

# Code for Galileo E1 data of PRN 1
gal_e1_data_code = [ 0xF5, 0xD7, 0x10, 0x13, 0x05, 0x73, 0x54, 0x1B, 0x9D, 0xBD, 0x4F, 0xD9, 0xE9, 0xB2, 0x0A, 0x0D, 0x59, 0xD1, 0x44, 0xC5, 0x4B, 0xC7, 0x93, 0x55, 0x39, 0xD2, 0xE7, 0x58, 0x10, 0xFB, 0x51, 0xE4, 0x94, 0x09, 0x3A, 0x0A, 0x19, 0xDD, 0x79, 0xC7, 0x0C, 0x5A, 0x98, 0xE5, 0x65, 0x7A, 0xA5, 0x78, 0x09, 0x77, 0x77, 0xE8, 0x6B, 0xCC, 0x46, 0x51, 0xCC, 0x72, 0xF2, 0xF9, 0x74, 0xDC, 0x76, 0x6E, 0x07, 0xAE, 0xA3, 0xD0, 0xB5, 0x57, 0xEF, 0x42, 0xFF, 0x57, 0xE6, 0xA5, 0x8E, 0x80, 0x53, 0x58, 0xCE, 0x92, 0x57, 0x66, 0x91, 0x33, 0xB1, 0x8F, 0x80, 0xFD, 0xBD, 0xFB, 0x38, 0xC5, 0x52, 0x4C, 0x7F, 0xB1, 0xDE, 0x07, 0x98, 0x42, 0x48, 0x29, 0x90, 0xDF, 0x58, 0xF7, 0x23, 0x21, 0xD9, 0x20, 0x1F, 0x89, 0x79, 0xEA, 0xB1, 0x59, 0xB2, 0x67, 0x9C, 0x9E, 0x95, 0xAA, 0x6D, 0x53, 0x45, 0x6C, 0x0D, 0xF7, 0x5C, 0x2B, 0x43, 0x16, 0xD1, 0xE2, 0x30, 0x92, 0x16, 0x88, 0x28, 0x54, 0x25, 0x3A, 0x1F, 0xA6, 0x0C, 0xA2, 0xC9, 0x4E, 0xCE, 0x01, 0x3E, 0x2A, 0x8C, 0x94, 0x33, 0x41, 0xE7, 0xD9, 0xE5, 0xA8, 0x46, 0x4B, 0x3A, 0xD4, 0x07, 0xE0, 0xAE, 0x46, 0x5C, 0x3E, 0x3D, 0xD1, 0xBE, 0x60, 0xA8, 0xC3, 0xD5, 0x0F, 0x83, 0x15, 0x36, 0x40, 0x1E, 0x77, 0x6B, 0xE0, 0x2A, 0x60, 0x42, 0xFC, 0x4A, 0x27, 0xAF, 0x65, 0x3F, 0x0C, 0xFC, 0x4D, 0x4D, 0x01, 0x3F, 0x11, 0x53, 0x10, 0x78, 0x8D, 0x68, 0xCA, 0xEA, 0xD3, 0xEC, 0xCC, 0xC5, 0x33, 0x05, 0x87, 0xEB, 0x3C, 0x22, 0xA1, 0x45, 0x9F, 0xC8, 0xE6, 0xFC, 0xCE, 0x9C, 0xDE, 0x84, 0x9A, 0x52, 0x05, 0xE7, 0x0C, 0x6D, 0x66, 0xD1, 0x25, 0x81, 0x4D, 0x69, 0x8D, 0xD0, 0xEE, 0xBF, 0xEA, 0xE5, 0x2C, 0xC6, 0x5C, 0x5C, 0x84, 0xEE, 0xDF, 0x20, 0x73, 0x79, 0x00, 0x0E, 0x16, 0x9D, 0x31, 0x84, 0x26, 0x51, 0x6A, 0xC5, 0xD1, 0xC3, 0x1F, 0x2E, 0x18, 0xA6, 0x5E, 0x07, 0xAE, 0x6E, 0x33, 0xFD, 0xD7, 0x24, 0xB1, 0x30, 0x98, 0xB3, 0xA4, 0x44, 0x68, 0x83, 0x89, 0xEF, 0xBB, 0xB5, 0xEE, 0xAB, 0x58, 0x87, 0x42, 0xBB, 0x08, 0x3B, 0x67, 0x9D, 0x42, 0xFB, 0x26, 0xFF, 0x77, 0x91, 0x9E, 0xAB, 0x21, 0xDE, 0x03, 0x89, 0xD9, 0x99, 0x74, 0x98, 0xF9, 0x67, 0xAE, 0x05, 0xAF, 0x0F, 0x4C, 0x7E, 0x17, 0x74, 0x16, 0xE1, 0x8C, 0x4D, 0x5E, 0x69, 0x87, 0xED, 0x35, 0x90, 0x69, 0x0A, 0xD1, 0x27, 0xD8, 0x72, 0xF1, 0x4A, 0x8F, 0x49, 0x03, 0xA1, 0x23, 0x29, 0x73, 0x2A, 0x97, 0x68, 0xF8, 0x2F, 0x29, 0x5B, 0xEE, 0x39, 0x18, 0x79, 0x29, 0x3E, 0x3A, 0x97, 0xD5, 0x14, 0x35, 0xA7, 0xF0, 0x3E, 0xD7, 0xFB, 0xE2, 0x75, 0xF1, 0x02, 0xA8, 0x32, 0x02, 0xDC, 0x3D, 0xE9, 0x4A, 0xF4, 0xC7, 0x12, 0xE9, 0xD0, 0x06, 0xD1, 0x82, 0x69, 0x3E, 0x96, 0x32, 0x93, 0x3E, 0x6E, 0xB7, 0x73, 0x88, 0x0C, 0xF1, 0x47, 0xB9, 0x22, 0xE7, 0x45, 0x39, 0xE4, 0x58, 0x2F, 0x79, 0xE3, 0x97, 0x23, 0xB4, 0xC8, 0x0E, 0x42, 0xED, 0xCE, 0x4C, 0x08, 0xA8, 0xD0, 0x22, 0x21, 0xBA, 0xE6, 0xD1, 0x77, 0x34, 0x81, 0x7D, 0x5B, 0x53, 0x1C, 0x0D, 0x3C, 0x1A, 0xE7, 0x23, 0x91, 0x1F, 0x3F, 0xFF, 0x6A, 0xAC, 0x02, 0xE9, 0x7F, 0xEA, 0x69, 0xE3, 0x76, 0xAF, 0x47, 0x61, 0xE6, 0x45, 0x1C, 0xA6, 0x1F, 0xDB, 0x2F, 0x91, 0x87, 0x64, 0x2E, 0xFC, 0xD6, 0x3A, 0x09, 0xAA, 0xB6, 0x80, 0x77, 0x0C, 0x15, 0x93, 0xEE, 0xDD, 0x4F, 0xF4, 0x29, 0x3B, 0xFF, 0xD6, 0xDD, 0x2C, 0x33, 0x67, 0xE8, 0x5B, 0x14, 0xA6, 0x54, 0xC8, 0x34, 0xB6, 0x69, 0x94, 0x21, 0xA0 ]

def gen_signal(duration_s=0.004, noise_power_db=27.0, doppler=0, code=gal_e1_data_code, pilot_code=gal_e1_pilot_code, chipping_rate=1.023e6, overlay_signal=None, pilot=False):
    # Generate the signal
    n_samples = int(duration_s * fs)
    
    # NCOs
    carrier_phase = 0.0
    code_phase = 0.0
    carrier_rate = (fc + doppler) / fs
    code_rate = (chipping_rate + (doppler * chipping_rate / fgnss)) / fs

    # Code chip
    code_index = 0

    # Data bit
    data_bit = 1

    # Generate the signal
    signal = np.zeros(n_samples)
    for i in range(n_samples):
        # Generate the carrier
        carrier = np.cos(2 * np.pi * carrier_phase)
        carrier_phase += carrier_rate
        if carrier_phase > 1:
            carrier_phase -= 1

        # Generate the code
        code_sample = 1 if ((code[int(code_index / 8)] >> (7 - (code_index % 8))) & 0x1) else -1
        code_sample_pilot = 1 if ((pilot_code[int(code_index / 8)] >> (7 - (code_index % 8))) & 0x1) else -1
        code_phase += code_rate
        if code_phase > 1:
            if code_index == 4091:
                code_index = 0
                data_bit = (1 if np.random.randint(0, 2) else -1)
            else:
                code_index += 1
            code_phase -= 1

        # Multiply the carrier by the code
        signal[i] = carrier * code_sample

        # Overlays
        if(overlay_signal == "BOC1"):
            signal[i] *= 1 if code_phase > 0.5 else -1

        # Data (for now, just a random sequence)
        if not pilot:
            signal[i] *= data_bit

        # Pilot signal
        if pilot:
            signal[i] = signal[i] / 2.0
            pilot_signal = carrier * code_sample_pilot
            if(overlay_signal == "BOC1"):
                pilot_signal *= (1 if code_phase > 0.5 else -1)
            signal[i] = pilot_signal / 2.0

        # Add noise
        signal[i] += np.random.normal(0, 10.0**(noise_power_db/20.0))

    return signal

signal = gen_signal(duration_s=0.05, code=gal_e1_pilot_code, doppler=0, overlay_signal="BOC1", pilot=True)

with open('out.bin', 'wb') as file:
    by = 0
    for i in range(0, len(signal)):
        by = by | ((0x1 if signal[i] > 0 else 0x0) << (i % 8))
        if i > 0 and i % 8 == 0:
            file.write(by.to_bytes(1))
            by = 0
    file.close()

# plt.plot(signal)
# plt.show()